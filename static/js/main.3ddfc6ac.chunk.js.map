{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["handleLinkedin","window","open","handleGithub","handleMail","handleTwitter","handleResume","App","className","id","params","particles","opacity","color","number","value","size","line_linked","distance","background","image","interactivity","events","onhover","enable","mode","style","top","src","width","onClick","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sNAOA,SAASA,IACPC,OAAOC,KAAK,+CAAgD,UAG9D,SAASC,IACPF,OAAOC,KAAK,gCAAiC,UAG/C,SAASE,IACPH,OAAOC,KAAK,kCAAmC,UAGjD,SAASG,IACPJ,OAAOC,KAAK,iCAAkC,UAGhD,SAASI,IACPL,OAAOC,KAAK,gCAAiC,UAiEhCK,MA7Df,WACE,OACE,yBAAKC,UAAU,OACb,yBAAKC,GAAG,aACN,kBAAC,IAAD,CACEC,OAAQ,CACNC,UAAW,CACTC,QAAS,EACTC,MAAO,UACPC,OAAQ,CACNC,MAAO,KAETC,KAAM,CACJD,MAAO,GAETE,YAAa,CACXC,SAAU,MAGdC,WAAY,CACVC,MAAO,uDAETC,cAAe,CACbC,OAAQ,CACNC,QAAS,CACPC,QAAQ,EACRC,KAAM,iBASlB,yBAAKjB,UAAU,YACb,wBAAIA,UAAU,WAAWkB,MAAO,CAAEC,IAAK,QAASd,MAAO,YAAvD,eACA,wBAAIJ,GAAG,aACL,4BACE,yBAAKmB,IAAI,eAAeC,MAAM,OAAOC,QAAS9B,KAEhD,4BACE,yBAAK4B,IAAI,aAAaC,MAAM,OAAOC,QAAS3B,KAE9C,4BACE,yBAAKyB,IAAI,WAAWC,MAAM,OAAOC,QAAS1B,KAE5C,4BACE,yBAAKwB,IAAI,cAAcC,MAAM,OAAOC,QAASzB,KAE/C,4BACE,yBAAKuB,IAAI,aAAaC,MAAM,OAAOC,QAASxB,SCnEpCyB,QACW,cAA7B9B,OAAO+B,SAASC,UAEe,UAA7BhC,OAAO+B,SAASC,UAEhBhC,OAAO+B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.3ddfc6ac.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Particles from 'react-particles-js';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faGithub, faLinkedin, faTwitter, } from \"@fortawesome/free-brands-svg-icons\";\nimport { faEnvelope } from \"@fortawesome/free-regular-svg-icons\"\n\nfunction handleLinkedin() {\n  window.open(\"https://www.linkedin.com/in/nicholas-maleki/\", '_blank');\n}\n\nfunction handleGithub() {\n  window.open(\"https://github.com/nickmaleki\", '_blank');\n}\n\nfunction handleMail() {\n  window.open(\"mailto:nicholasmaleki@gmail.com\", '_blank');\n}\n\nfunction handleTwitter() {\n  window.open(\"https://twitter.com/malekinick\", '_blank');\n}\n\nfunction handleResume() {\n  window.open(\"https://nickmaleki.com/resume\", '_blank');\n}\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div id=\"particles\">\n        <Particles\n          params={{\n            particles: {\n              opacity: 1,\n              color: \"#ed7e48\",\n              number: {\n                value: 100\n              },\n              size: {\n                value: 5\n              },\n              line_linked: {\n                distance: 200,\n              }\n            },\n            background: {\n              image: \"linear-gradient(135deg, #ffffff -100%, #093f79 50%)\"\n            },\n            interactivity: {\n              events: {\n                onhover: {\n                  enable: true,\n                  mode: \"repulse\"\n                }\n              }\n            }\n          }}\n        >\n        </Particles>\n      </div>\n\n      <div className=\"mainflex\">\n        <h1 className=\"centered\" style={{ top: '-60px', color: '#ffffff' }}>Nick Maleki</h1>\n        <ul id=\"nav-links\">\n          <li>\n            <img src=\"LinkedIn.svg\" width=\"40px\" onClick={handleLinkedin} />\n          </li>\n          <li>\n            <img src=\"GitHub.svg\" width=\"40px\" onClick={handleGithub} />\n          </li>\n          <li>\n            <img src=\"Mail.svg\" width=\"40px\" onClick={handleMail} />\n          </li>\n          <li>\n            <img src=\"Twitter.svg\" width=\"40px\" onClick={handleTwitter} />\n          </li>\n          <li>\n            <img src=\"Resume.svg\" width=\"40px\" onClick={handleResume} />\n          </li>\n        </ul>\n      </div>\n\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}